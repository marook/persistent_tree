persistent_tree - n log n lookup for big persistent data

1) Requirements
1.1) pydot
2) Installation
3) Usage Example
3.1) Fixed Node Size Tree
4) Running Tests
5) Running Memory Benchmark
6) License


------------------------------------------------------------------------
Requirements

You need the following (unusual) requirements in order to use the
persistent tree library.


------------------------------------------------------------------------
Requirements - pydot

pydot ( http://code.google.com/p/pydot/ ) can be used to format trees
as dot graphs. You only need pydot if you plan to use the
persistent_tree.dot module.

You can install pydot via pip:

$ pip install --user pydot


------------------------------------------------------------------------
Installation

To install persistent_tree into your home directory type the following:

$ python setup.py install --home ~/.local

If you haven't already extended your local python path then add the following
to your environment configuration script. For example to your ~/.bashrc:

$ export PYTHONPATH=~/.local/lib/python:$PYTHONPATH


------------------------------------------------------------------------
Usage Example - Fixed Node Size Tree

Binary trees with fixed key and data size can be stored efficiently on
file systems with sparse file support
(http://en.wikipedia.org/wiki/Sparse_file). This includes NTFS and ext3
file systems.

For n equals the number of nodes in the written tree a O(n) = n applies
for writing the tree and O(n) = n log n applies for finding a node in
the file.

from persistent_tree import manipulate, model, persistence

KEY_SIZE_IN_BYTES = 2
DATA_SIZE_IN_BYTES = 2

# create a 'tree' with a single node
root_node = model.Node('k0', 'd0')

# write the tree to a binary file
with open('my_tree.bin', 'wb') as f:
    writer = persistence.FixedNodeSizeWriter(KEY_SIZE_IN_BYTES, DATA_SIZE_IN_BYTES)

    writer.write_nodes(f, root_node)

# read a node from the written tree file
reader = persistence.FixedNodeSizeReader(KEY_SIZE_IN_BYTES, DATA_SIZE_IN_BYTES)

with open('my_tree.bin', 'rb') as f:
    node = reader.find_node(f, 'k0')

    print 'Found node with data: %s' % (node.data, )


------------------------------------------------------------------------
Running Tests

To run all tests type:

$ python setup.py test

To only run the fast running tests run:

$ python setup.py test_s


------------------------------------------------------------------------
Running Memory Benchmark

To run a memory usage benchmark type the following:

$ python setup.py memory_benchmark


------------------------------------------------------------------------
License

The persistent_tree library is licensend under the LGPL v3 license. See
the file COPYING for more details.
